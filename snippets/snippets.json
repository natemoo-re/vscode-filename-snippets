{
    "Stencil Component": {
        "prefix": "st-component",
        "body": [
            "import { Component } from '@stencil/core';",
            "",
            "",
            "@Component({",
            "\ttag: '${1:$TM_FILENAME_BASE}',",
            "\tstyleUrl: '${1:$TM_FILENAME_BASE}.css'",
            "})",
            "export class ${2:${TM_FILENAME_BASE/^(.)(.*)/${1:/upcase}/}${2}} {",
            "\t$0",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<p>My name is Stencil</p>",
            "\t\t);",
            "\t}",
            "}"
        ],
        "description": "Generate a new Stencil component"
    },
    "Stencil Prop": {
        "prefix": "st-prop",
        "body": [
            "@Prop() ${1:newProp}: ${2|any,string,boolean,number|};"
        ],
        "description": "Add a new Prop decorator. Components need to explicitly declare the Props it expects to receive using the Prop decorator. Props can be a number, string, boolean, or even an Object. By default, when a member decorated with Prop decorator is set, the component will efficiently re-render."
    },
    "Stencil Watch": {
        "prefix": "st-watch",
        "body": [
            "@Watch('${1:myProp}')",
            "${2:watchHandler}(newValue) {",
            "\t${0:console.log('The value of ${1:myProp} is: ', newValue);}",
            "}"
        ],
        "description": "Add a new watch decorator to make the function be invoked immediately before and after a member decorated with Prop is changed."
    },
    "Stencil State": {
        "prefix": "st-state",
        "body": [
            "@State() ${1:newState}: ${2|any,string,boolean,number|};"
        ],
        "description": "Add a new State decorator to manage internal state. Decorating a class member with State will trigger efficient re-renders when the value is set, but it won't be accessible through the Element."
    },
    "Stencil Method": {
        "prefix": "st-method",
        "body": [
            "@Method()",
            "${1:publicMethod}() {",
            "\t$0",
            "}"
        ],
        "description": "Add a Method decorator to expose the function on the public API. Functions decorated with the @Method() decorator can be called directly from the element."
    },
    "Stencil Element": {
        "prefix": "st-element",
        "body": [
            "@Element() ${1:element}: HTMLElement;"
        ],
        "description": "Add a new Element decorator to get access to the host element within the class instance."
    },
    "Stencil Event": {
        "prefix": "st-event",
        "body": [
            "@Event() ${1:newCustomEvent}: EventEmitter;"
        ],
        "description": "Add a new Event emitter to dispatch Custom DOM events up for other components to handle."
    },
    "Stencil Listen": {
        "prefix": "st-listen",
        "body": [
            "@Listen('${1:myCustomEvent}')",
            "customEventHandler(event) {",
            "\t${0:console.log('Received the custom event: ', event);}",
            "}"
        ],
        "description": "Add a new Listen decorator. The Listen decorator is for listening and responding to DOM events from a child."
    },
    "Stencil Component Will Load Life Cycle": {
        "prefix": "st-willload",
        "body": [
            "componentWillLoad() {",
            "\t${0:console.log('The component is about to be rendered');}",
            "}"
        ],
        "description": "Add the method for Component Will Load Life Cycle. The component will load but has not rendered yet, this is a good place to make any last minute updates before rendering."
    },
    "Stencil Component Did Load Life Cycle": {
        "prefix": "st-didload",
        "body": [
            "componentDidLoad() {",
            "\t${0:console.log('The component has been rendered');}",
            "}"
        ],
        "description": "Add the method for Component Did Load Life Cycle. The component is loaded and has rendered, updating data in this event may cause the component to re-render."
    },
    "Stencil Component Will Update Life Cycle": {
        "prefix": "st-willupdate",
        "body": [
            "componentWillUpdate() {",
            "\t${0:console.log('The component will update');}",
            "}"
        ],
        "description": "Add the method for Component Will Update Life Cycle. The component will update and re-render, called multiple times throughout the life of the component as it updates."
    },
    "Stencil Component Did Update Life Cycle": {
        "prefix": "st-didupdate",
        "body": [
            "componentDidUpdate() {",
            "\t${0:console.log('The component did update');}",
            "}"
        ],
        "description": "Add the method for Component Did Update Life Cycle. The component finished updating, called after componentWillUpdate"
    },
    "Stencil Component Did Unload Life Cycle": {
        "prefix": "st-didunload",
        "body": [
            "componentDidUnload() {",
            "\t${0:console.log('The view has been removed from the DOM');}",
            "}"
        ],
        "description": "Add the method for Component Did Unload Life Cycle. he component did unload and the element will be destroyed."
    }
}
